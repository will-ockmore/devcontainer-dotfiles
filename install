#!/usr/bin/env python3

from pathlib import Path
from urllib.request import urlopen, urlretrieve
import json
from datetime import datetime, timedelta
import os
import subprocess
import tempfile


ADDITIONAL_PROGRAMS = ["ripgrep", "bat", "exa"]

NEOVIM_BUILD_DEPENDENCIES = [
    "ninja-build",
    "gettext",
    "libtool",
    "libtool-bin",
    "autoconf",
    "automake",
    "cmake",
    "g++",
    "pkg-config",
    "unzip",
    "curl",
    "doxygen",
]

WF_STATE_DIR = Path(os.environ["WF_STATE_DIR"])
NEOVIM_INSTALL_LOCATION = WF_STATE_DIR / "neovim"

BOLD_CYAN = "\x1b[36;1m"
BOLD_WHITE = "\x1b[37;1m"
BOLD_GREEN = "\x1b[32;1m"
RESET = "\x1b[0m"


def should_build_neovim() -> bool:
    """
    Check to see if there is a recent cached version
    """

    nvim_binary_location = NEOVIM_INSTALL_LOCATION / "bin/nvim"

    if nvim_binary_location.exists():
        one_week_ago = datetime.now() - timedelta(days=7)
        nvim_last_modified = datetime.fromtimestamp(
            nvim_binary_location.stat().st_mtime
        )

        return nvim_last_modified < one_week_ago

    return True


SHOULD_BUILD_NEOVIM = should_build_neovim()


def create_symlinks(dotfiles_dir_path: Path, dir_path: Path):
    # Lifted verbatim from wayflyer/dotfiles
    for entry in os.scandir(dir_path):
        entry_path = dir_path / entry.name
        entry_path_rel = entry_path.relative_to(dotfiles_dir_path)
        local_path = Path.home() / entry_path_rel
        if entry.is_dir():
            if not local_path.exists():
                local_path.mkdir()
            create_symlinks(dotfiles_dir_path, entry_path)
        else:
            local_path.symlink_to(entry_path)


def copy_dotfiles():
    print()
    print(f"{BOLD_WHITE}Moving configuration files...{RESET}")
    print()

    dotfiles_dir = Path(__file__).parent / "dotfiles"

    create_symlinks(dotfiles_dir, dotfiles_dir)


def copy_nvim_config():
    print()
    print(f"{BOLD_WHITE}Setting up init.nvim...{RESET}")
    print()
    nvim_config_dir = Path.home() / ".config/nvim"
    nvim_config_dir.mkdir(parents=True, exist_ok=True)

    # nvim configuration
    urlretrieve(
        "https://raw.githubusercontent.com/will-ockmore/vimrc/master/init.vim",
        nvim_config_dir / "init.vim",
    )

    coc_settings = json.loads(
        urlopen(
            "https://raw.githubusercontent.com/will-ockmore/vimrc/master/coc-settings.json"
        ).read()
    )
    del coc_settings["python.formatting.blackPath"]

    with open(nvim_config_dir / "coc-settings.json", "w+") as outfile:
        json.dump(coc_settings, outfile)


def install_programs():
    print()
    print(f"{BOLD_WHITE}Installing additional programs...{RESET}")
    print()

    # Fetch latest package lists
    subprocess.run(["apt", "update"], check=True)

    dependencies = ADDITIONAL_PROGRAMS

    if SHOULD_BUILD_NEOVIM:
        dependencies += NEOVIM_BUILD_DEPENDENCIES

    subprocess.run(
        ["apt", "install", "-y", *dependencies],
        check=True,
    )

    # Install pure prompt
    zsh_dir = Path.home() / ".zsh"
    zsh_dir.mkdir(parents=True, exist_ok=True)
    subprocess.run(
        [
            "git",
            "clone",
            "https://github.com/sindresorhus/pure.git",
            str(zsh_dir / "pure"),
        ],
        check=True,
    )

    # Install FZF
    subprocess.run(
        [
            "git",
            "clone",
            "--depth",
            "1",
            "https://github.com/junegunn/fzf.git",
            Path.home() / ".fzf",
        ],
        check=True,
    )

    yes = subprocess.Popen(["yes"], stdout=subprocess.PIPE)
    fzf_install = subprocess.Popen(
        [Path.home() / ".fzf/install"], stdin=yes.stdout, stdout=subprocess.PIPE
    )
    yes.stdout.close()
    fzf_install.communicate()


def build_neovim():
    print()
    print(f"{BOLD_WHITE}Building neovim...{RESET}")
    print()

    working_dir = Path.cwd()

    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.run(
            ["git", "clone", "https://github.com/neovim/neovim", tmpdir],
            check=True,
        )

        os.chdir(tmpdir)

        subprocess.run(
            [
                "git",
                "checkout",
                "stable",
            ],
            check=True,
        )

        NEOVIM_INSTALL_LOCATION.mkdir(exist_ok=True)

        subprocess.run(
            [
                "make",
                "CMAKE_BUILD_TYPE=Release",
                f"CMAKE_EXTRA_FLAGS='-DCMAKE_INSTALL_PREFIX={NEOVIM_INSTALL_LOCATION}'",
            ],
            check=True,
        )
        subprocess.run(
            [
                "make",
                "install",
            ],
            check=True,
        )
        os.chdir(working_dir)

    # Install pynvim
    subprocess.run(
        [
            "pip",
            "install",
            "pynvim",
        ],
        check=True,
    )


def main():
    print()
    print(f"Running {BOLD_CYAN}dotfiles install script{RESET} ðŸ’¿")
    print()

    if SHOULD_BUILD_NEOVIM:
        subprocess.run(
            [
                "wf",
                "login",
            ],
            check=True,
        )

    copy_dotfiles()
    copy_nvim_config()
    install_programs()

    if SHOULD_BUILD_NEOVIM:
        build_neovim()

    print()
    print(f"{BOLD_GREEN}dotfiles installation complete{RESET} ðŸš€")
    print()


if __name__ == "__main__":
    main()
